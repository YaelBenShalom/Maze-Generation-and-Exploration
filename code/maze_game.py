import recursive_backtracking
import visualization
import wavefrontp
import maze_gen

# M = 10
# N = 8
# maze = [[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
#         [-1, 0, 0, 0, 0, 0, 0, 0, 0,-1],
#         [-1, 0, 0, 0, 0, 0, 0, 0, 0,-1],
#         [-1, 0,-1,-1,-1,-1,-1,-1, 0,-1],
#         [-1, 0,-1, 0, 0, 0, 0,-1, 0,-1],
#         [-1, 0,-1, 0,-1,-1,-1,-1, 0,-1],
#         [-1, 0, 0, 0, 0, 0, 0,-1, 0,-1],
#         [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]
# start = (1,1)
# goal = (6,4)
maze = [[0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0],
 [-1, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0],
 [0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0],
 [0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0],
 [0, -1, -1, -1, 0, -1, 0, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1],
 [0, -1, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0],
 [-1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, -1, -1],
 [0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0],
 [0, -1, -1, -1, 0, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, -1, 0, -1, 0],
 [0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
M = len(maze[0])
N = len(maze)
start = (0,0)
goal = (30,10)

if __name__ == "__main__":
    # maze = maze_gen.Maze(11, 31)
    # maze.maze_generator()

    # theRBT = recursive_backtracking.RBT(M, N, maze, start, goal)
    # theRBT.execute()

    # theApp = visualization.App(M, N, start, goal, maze, theRBT.solution, theRBT.nos)
    # theApp.on_execute()

    theWFP = wavefrontp.WFP(M, N, maze, start, goal)
    theWFP.execute()

    theApp = visualization.App(M, N, start, goal, maze, theWFP.solution, theWFP.nos)
    theApp.on_execute()